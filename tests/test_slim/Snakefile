import sys
import slimdemes
from slimdemes.utilities import safe_float
from slimdemes.testing import mimic_slimsim_with_msprime

# Configuration
configfile: "config/test_config.yaml"

# Parameters, etc
N_REPLICATES = config.get("n_replicates", 10)
MODELS = config["models"]
QS = config["rescale_qs"]
NUM_SAMPLES = config["num_samples"]

# Output directory
OUTPUT_DIR = "test_outputs"

rule convert_demes_json:
    input: yml="../examples/{model}.yml"
    output: json="../examples/{model}_q{q}.json"
    run:
        rescale_q = safe_float(wildcards.q)
        slimdemes.convert_demes_to_json(input_file=input.yml,
                                        ignore_gene_flow=True,
                                        rescale_q=rescale_q,
                                        out=output.json)

# Rule to run a single SLiM simulation
rule run_slim:
    input: json="../examples/{model}_q{q}.json", slim="test_sim.slim"
    output: f"{OUTPUT_DIR}/{{model}}_q{{q}}/slim/rep{{replicate}}.trees"
    params:
        sequence_length=config["sequence_length"]
    shell:
        """
        slim -d "sequence_length={params.sequence_length}" \
             -d "demes_json='{input.json}'" \
             -d "outfile='{output}'" \
             -d "seed={wildcards.replicate}" {input.slim}
        """

rule run_msprime:
    input:
        slim_trees=f"{OUTPUT_DIR}/{{model}}_q{{q}}/slim/rep{{replicate}}.trees"
    output:
        trees=f"{OUTPUT_DIR}/{{model}}_q{{q}}/msprime/n_{{num_samples}}/rep{{replicate}}.trees"
    run:
        output_dir = Path(output.trees).parent
        output_dir.mkdir(parents=True, exist_ok=True)

        mimic_slimsim_with_msprime(
            slim_ts_path=Path(input.slim_trees),
            num_samples=int(wildcards.num_samples),
            random_seed=int(wildcards.replicate),
            out=Path(output.trees)
        )


# Rule to generate and save comparison statistics
rule generate_comparison_stats:
    input:
        slim_trees=expand(rules.run_slim.output,
                          model=MODELS, q=QS, replicate=list(range(N_REPLICATES))),
        msp_trees=expand(rules.run_msprime.output,
                         num_samples=NUM_SAMPLES,
                         model=MODELS, q=QS, replicate=list(range(N_REPLICATES)))
    output:
        stats=f"{OUTPUT_DIR}/{{model}}_q{{q}}/n_{{num_samples}}/comparison_stats.csv",
        afs=f"{OUTPUT_DIR}/{{model}}_q{{q}}/n_{{num_samples}}/afs_data.npy"
    run:
        from slimdemes.testing import compare_sims
        import numpy as np

        # Generate comparison stats
        stats_df = compare_sims(
            sim_dir=OUTPUT_DIR,
            model=wildcards.model,
            rescale_q=wildcards.q,
            num_samples=int(wildcards.num_samples),
            replicates=N_REPLICATES
        )

        # Extract AFS data and save separately as numpy array
        afs_data = np.array([np.array(afs) for afs in stats_df['afs']])
        np.save(output.afs, afs_data)

        # Save other stats to CSV after dropping AFS column
        stats_df.drop('afs').write_csv(output.stats)

# Rule to create regular statistics comparison plot
rule plot_comparison_stats:
    input:
        stats=rules.generate_comparison_stats.output.stats
    output:
        plot=f"{OUTPUT_DIR}/{{model}}_q{{q}}/n_{{num_samples}}/comparison_plot_stats.pdf"
    run:
        from slimdemes.testing import plot_stats_comparison
        import polars as pl

        # Read stats and create plot
        stats_df = pl.read_csv(input.stats)
        plot_stats_comparison(stats_df, output.plot)

# Rule to create AFS comparison plot
rule plot_afs_comparison:
    input:
        stats=rules.generate_comparison_stats.output.stats,
        afs=rules.generate_comparison_stats.output.afs
    output:
        plot=f"{OUTPUT_DIR}/{{model}}_q{{q}}/n_{{num_samples}}/comparison_plot_afs.pdf"
    run:
        from slimdemes.testing import plot_afs_comparison
        import polars as pl
        import numpy as np

        # Read stats and AFS data
        stats_df = pl.read_csv(input.stats)
        afs_data = np.load(input.afs)

        # Add AFS back to DataFrame
        stats_df = stats_df.with_columns(pl.Series("afs", afs_data.tolist()))

        # Create plot
        plot_afs_comparison(stats_df, output.plot)

# Update the all rule to include all outputs
rule all:
    input:
        expand(rules.run_slim.output, model=MODELS, q=QS, replicate=list(range(N_REPLICATES))),
        expand(rules.run_msprime.output, model=MODELS, q=QS, num_samples=NUM_SAMPLES, replicate=list(range(N_REPLICATES))),
        expand(rules.generate_comparison_stats.output.stats, num_samples=NUM_SAMPLES, model=MODELS, q=QS),
        expand(rules.generate_comparison_stats.output.afs, num_samples=NUM_SAMPLES, model=MODELS, q=QS),
        expand(rules.plot_comparison_stats.output.plot, num_samples=NUM_SAMPLES, model=MODELS, q=QS),
        expand(rules.plot_afs_comparison.output.plot, num_samples=NUM_SAMPLES, model=MODELS, q=QS)
